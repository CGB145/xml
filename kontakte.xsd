<?xml version="1.0" encoding="UTF-8"?>  <!-- Prolog -->

<!-- !!!Datei ist nicht Fertig!!! -->

<!-- .xsd ist quasi eine andere art von einer .dtd datei die, die Struktur(reihenfolge der element ist wichtig) von der xml definiert. mit einer .xsd datei kann man strenger strukturien und/oder prüfen als bei einer .dtd datei-->
<!-- "xmlns:xs" definiert Nameraum. das ns steht für namespace -->
<!-- xs: = Namensraum. Damit das System versteht dass es von www.w3.org/2001/XMLSchema ein Schema ist ist. Namensraeume haben sich nicht durchgesetzt weil ":" in vielen Programmier Sprachen reserviert ist -->
<!-- so kann auch zum bsp das schema von adobe geladen werden -->
<!-- elemete oder attribute können qualifiziert sein oder nicht, in dem fall sind attribute nicht qualifiziert und bekommen kein xs: dazu -->
<!-- Wurzel, Stamm, Äste sind vom Type Komplex. Blätter sind Simple Type. Wenn Arttribute vorhanden sind, sind blätter Komplex Type -->
<!-- Wurzel = Root, Stamm = Head oder Body bei HTML also in xml keins. Äste = Eltern-Elemente <adresse></adresse> zB. . Blätter = Kindern-Elemente zB. <name> </name> -->
<!-- Die Struktor der xml datei wird zwischen den <xs:schema> tags definiert -->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified"> 	
	<!-- Definition des elementes root -->
	<xs:element name="root"> <!-- name vom root element bei name="" -->
		<!-- auslesbarer kommentar -->
		<xs:annotation>
			<xs:documentation>
				Schema zum Überprüfen von Kontaktdaten (Mobiltelfon)   <!-- Dieser Kommenter ist nicht auslesbar aber das von "xs:annotation" -> "xs:documentation" ist auslesbar -->
			</xs:documentation>
		</xs:annotation>	
		<!-- auslesbarer kommentar ende -->
		
		<!-- Hier wird "root" definiert -->
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="kontakt"/> <!-- in root ist nur kontakt vorhanden -->
			</xs:sequence> <!-- "sequence" leitet mehrere Kindern-Elemente die vorkommen können -->
		</xs:complexType>
	</xs:element>

	<!-- Definition des Elementes kontakt. kontakt hat Kindern-Elemente  -->
	<xs:element name="kontakt">

		<xs:complexType> <!-- kontakt ist ein complexType weil es noch Kindern-Elemente hat -->
			<xs:sequence> <!-- "sequence" da "kontakt" mehrere elemente beihaltet -->				
				<xs:element ref="anrede"/> <!-- zwischen den beiden "sequence" tags kommen alle Elemente die in kontakt vorkommen. in vorkommender reihenfolge -->

				<!-- kurz schreibweise einer Definition eines elementes was nur text beihaltet und nicht vieles überprüft werden soll -->
				<xs:element name="titel" type="xs:string"/>
				<xs:element ref="name"/>
				<xs:element name="vorname" type="xs:string" maxOccurs="5"/>
				<xs:element name="spitzname" type="xs:string"/>
				<xs:element ref="geburtstag"/> <!-- datum muss in der .xml datei im US format angegeben werden 25.12.2001 -> 2001-12-25. Falls kein Datum vorhanden dann in xml   -->
				<xs:element ref="bild"/>
				<xs:element ref="firma" minOccurs="0" maxOccurs="1"/>
				<xs:element ref="adresse"/>
				<xs:element ref="nummern"/>
			</xs:sequence>
		</xs:complexType>

	</xs:element>


	<!-- Definition des Elementes Name -->
	<xs:element name="name">
		<xs:simpleType>
			<xs:restriction base="xs:string"/> 
		</xs:simpleType>
	</xs:element>

	<!-- Definition des Elementes anrede. anrede hat text als Inhalt -->
	<xs:element name="anrede">

		<xs:simpleType> <!-- anrede ist ein simpleType weil es keine Kindern-Elemente hat -->
			<xs:restriction base="xs:string"/> <!-- da anrede als Inhalt nur text hat und haben soll wird "xs:restriction" mit dem Datentyp "xs:string" benutzt. String = mehrere chars (Buchstaben) -->
		</xs:simpleType>

	</xs:element>


	<!-- keine Ahnung der part wird noch erklärt -->

	<xs:element name = "geburtstag" nillable="true" >
    		<xs:simpleType>
        		<xs:union>
            			<xs:simpleType>
                			<xs:restriction base="xs:date">
                    				<xs:minInclusive value="1900-01-01"/>
                			</xs:restriction>        
            			</xs:simpleType>            
            			<xs:simpleType>
                			<xs:restriction base="xs:string">
                    				<xs:whiteSpace value="collapse" />
                    				<xs:length value="0" />
                			</xs:restriction>        
            			</xs:simpleType>            
        		</xs:union>
    		</xs:simpleType>
	</xs:element>

	<!-- Bild element mit attribut -->
	<xs:element name="bild">
		<xs:complexType>
			<xs:simpleContent>
				<xs:extension base="leer"> <!-- "leer" erfundener Datentyp|Referenztyp --> 
					<xs:attribute name="quelle" type="xs:string" use="optional"/> <!-- "use" ob das attribut optional, notwendig oder verboten ist. ist nur bei attributen verwendbar-->
				</xs:extension>
			</xs:simpleContent>
		</xs:complexType>
	</xs:element>
	
	<!-- Definition Datentyp leer -->
	<xs:simpleType name="leer">
		<xs:restriction base="xs:string">
			<xs:length value="0"/>
		</xs:restriction>
	</xs:simpleType>


	<!-- Definition Element Firma-->
	<xs:element name="firma">

		<xs:complexType>
			<xs:sequence>
				<xs:element ref="name"/>
				<xs:element name="abteilung" type="xs:string"/>
				<xs:element name="position" type="xs:string"/>
			</xs:sequence>
		</xs:complexType>

	</xs:element>


	<!-- Def. Element Adresse -->
	<xs:element name="adresse">
		<xs:complexType> <!-- Adresse beihaltet Kindern-Elemente deswegen complexType -->
			<xs:sequence> <!-- in sequence kommen alle Kindern-Elemente in reihenfolge auf -->
				<xs:element name="strasse" type="xs:string"/> <!-- Kindern-Element kurz schreibweise -->
				<xs:element name="plz" type="xs:string"/>
				<xs:element name="ort" type="xs:string"/>
				<xs:element name="region" type="xs:string"/>
				<xs:element name="staat" type="xs:string"/>
			</xs:sequence>
			<xs:attribute name="art" use="optional"> <!-- da Adresse ein complexType ist kann man hier "xs:attribute" benutzen -->
				<xs:simpleType> <!-- das attribut an sich ist ein simpleType --> 
					<xs:restriction base="xs:string"/> <!-- inhalt vom attribut auf String/Text begrenzen -->
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name="nummern">
		<xs:complexType> <!-- nummern ist Eltern-Element  -->
			<xs:sequence> <!-- beihaltet Kindern-Elemente -->
				<xs:element name="nummer" maxOccurs="5">
					<xs:complexType> <!-- nummer ist ein Kind-Elemet hat aber ein attribut -->
						<xs:simpleContent>	
							<xs:extension base="xs:string"> <!-- inhalt auf String/Text begrenzen -->
								<xs:attribute name="art" type="xs:string" use="optional"/>
								<xs:attribute name="ton" type="xs:string" use="optional"/>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>						
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>



</xs:schema> <!-- muss die letzte zeile sein --> 
